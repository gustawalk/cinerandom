<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Movie Search</title>
    <link rel="icon" type="image/svg+xml" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>üêµ</text></svg>">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body class="bg-stone-800 text-white flex flex-col items-center justify-center min-h-screen p-4">
    <button onclick="window.location.href='/logout'"
        class="absolute top-4 left-4 bg-stone-700 hover:bg-stone-600 text-white px-4 py-2 rounded-lg shadow-md transition">
        Logout
    </button>
    <div id="edit-modal" class="hidden fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm">
        <div class="bg-stone-900 text-white p-6 rounded-lg shadow-lg w-full max-w-md max-h-[70vh] overflow-hidden flex flex-col">
              <h2 id="edit-modal-title" class="text-xl font-bold mb-4"></h2>
                <div id="edit-movie-list" class="overflow-auto flex-1 p-2 border border-stone-700 rounded-lg max-h-120">
                  </div>
                <button id="close-edit-modal" class="mt-4 bg-red-500 hover:bg-red-600 text-white font-semibold py-2 px-4 rounded-lg transition">
                   Close
                </button>
            </div>
      </div>
    <div id="sorted-movie">

    </div>
    <div class="flex justify-between w-full max-w-xl items-center relative">
        <div class="bg-stone-700 p-6 rounded-lg shadow-lg w-full max-w-md text-center max-h-[70vh] overflow-auto">
            <h1 class="text-2xl font-bold mb-4">Search for a Movie</h1>
            <div class="flex space-x-2">
                <input type="text" id="movie-input" class="w-full p-2 rounded-lg text-black" placeholder="Enter movie name">
                <button onclick="search_movie_db()" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition duration-150">Search</button>
            </div>
            <div id="movies-table" class="mt-4 text-left text-lg"></div>
        </div>

        <div class="flex flex-col space-y-6 absolute left-[calc(100%+2rem)] top-1/2 -translate-y-1/2">
          <div class="bg-stone-700 p-7 rounded-lg shadow-lg w-80 text-center flex-shrink-0">
              <label for="user-lists" class="text-white font-semibold">User lists:</label>
              <br>
              <br>
              <select id="user-lists" class="bg-stone-600 text-white px-6 py-2 rounded-lg">
              </select>
              <div class="mt-4 flex justify-between space-x-2">
                  <button id="sort" class="bg-green-500 hover:bg-green-700 text-white py-2 px-6 rounded-lg transition duration-150">Sort</button>
                  <button id="edit" class="bg-yellow-500 hover:bg-yellow-700 text-white py-2 px-6 rounded-lg transition duration-150">Edit</button>
                  <button id="delete" class="bg-red-500 hover:bg-red-700 text-white py-2 px-4 rounded-lg transition duration-150">Delete</button>
              </div>
          </div>

          <div class="bg-stone-700 p-7 rounded-lg shadow-lg w-80 text-left flex-shrink-0">
              <h1 class="text-center font-semibold">User Statistics:</h1>
              <br>
              <h3 class="font-medium grid grid-cols-2">
                <span>Watched Movies</span>
                <span class="text-blue-400 font-bold text-right" id="user-watched-count"></span>
              </h3>
              <h3 class="font-medium grid grid-cols-2">
                <span>Unique Movies</span>
                <span class="text-blue-400 font-bold text-right" id="user-diff-count"></span>
              </h3>
          </div>
        </div>
    </div>

    <script>
        document.getElementById("edit").addEventListener("click", async(e) => {
          const list = document.getElementById("user-lists").value
          const list_name = document.getElementById("user-lists").textContent

          const response = await fetch("/api/list/edit", {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify({ list_id: list })
          })

          if(response.status != 200){
            Swal.fire({
              title: "No lists found!",
              text: "Search for a movie and create your list!",
              icon: "error",
              background: "#1c1917",
              color: "#ffffff",
              iconColor: "#ef4444",
              confirmButtonText: "Ok",
              confirmButtonColor: "#2563eb",
            });
          }

          const data = await response.json()

          document.getElementById("edit-modal-title").innerHTML = `Editing: ${list_name}`

          const movie_list_container = document.getElementById("edit-movie-list");
          movie_list_container.innerHTML = "";

          if(data.movies.length == 0){
            movie_list_container.innerHTML = "<p class='text-center text-gray-400'>You don't have any movie in this list.</p>";
          }else{
            data.movies.forEach(movie => {
              const movie_item = document.createElement("div");
              movie_item.classList.add("p-2", "border-b", "border-stone-700", "text-white", "flex", "justify-between");

              movie_item.innerHTML = `
                <a href='/detail/${movie.imdb_id}' class='text-white hover:text-blue-500 transition duration-150'>${movie.titulo}</a>
                <button class='text-blue-300 delete-btn hover:text-blue-200' data-id="${movie.imdb_id}">Delete</button>
              `;

              movie_list_container.appendChild(movie_item);
            });
          }

          document.querySelectorAll(".delete-btn").forEach(button => {
            button.addEventListener("click", async (event) => {
              const movie_id = event.target.getAttribute("data-id");

              const response = await fetch("/api/list/edit/delete", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json"
                },
                body: JSON.stringify({ movie_id: movie_id, list_id: list})
              });

              if(response.status != 200){
                return
              }

              window.location.reload();
            });
          });

          document.getElementById("edit-modal").classList.remove("hidden");
        });

        document.getElementById("close-edit-modal").addEventListener("click", () => {
                document.getElementById("edit-modal").classList.add("hidden");
        });
        document.getElementById("sort").addEventListener("click", async (e) => {
          const list = document.getElementById("user-lists").value

          const response = await fetch("/api/list/sort", {
              method: "POST",
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify({ list_id: list })
          })

          if(response.status != 200){
            if(response.status == 401){
              Swal.fire({
                title: "Your list is empty",
                text: "Add some movies to enable random selection!",
                icon: "error",
                background: "#1c1917",
                color: "#ffffff",
                iconColor: "#ef4444",
                confirmButtonText: "Ok",
                confirmButtonColor: "#2563eb",
              });

              return;
            }
              Swal.fire({
                title: "No lists found!",
                text: "Search for a movie and create your list!",
                icon: "error",
                background: "#1c1917",
                color: "#ffffff",
                iconColor: "#ef4444",
                confirmButtonText: "Ok",
                confirmButtonColor: "#2563eb",
              });
            return;
          }

          const data = await response.json()

          const movie_info = data.rows[0]

          const sorted_movie = document.getElementById("sorted-movie");

          sorted_movie.classList.add("fixed", "inset-0", "z-50");
          sorted_movie.innerHTML = `
            <div class="flex items-center justify-center min-h-screen bg-black bg-opacity-50 backdrop-blur-sm animate-fade-in">
              <div class="flex flex-col items-center text-center bg-stone-900 text-white p-8 pl-16 pr-16 rounded-lg shadow-lg w-full max-w-sm mx-auto scale-95">
              <h2 class="text-xl font-bold">${movie_info.titulo} - ${movie_info.ano}</h2>
              <h4 class="text-sm text-gray-300">${movie_info.duracao}</h4>
              <img src="${movie_info.poster}" alt="Poster" class="w-full h-auto rounded-lg mt-3">
              <button id="close-modal" class="mt-4 bg-green-600 hover:bg-green-700 text-white font-semibold py-4 px-8 rounded-lg transition">
                  Set as watched
              </button>
              <p class='text-gray-300'>(You don't have choice)</p>
              </div>
            </div>
          `
          document.getElementById("close-modal").addEventListener("click", () => {
              sorted_movie.innerHTML = "";
              sorted_movie.classList.remove("fixed", "inset-0", "z-50")
          });
          load_user_watched_count();
        })

        document.getElementById("delete").addEventListener("click", async (e) => {
            const list = document.getElementById("user-lists").value

            const response = await fetch("/api/list/delete", {
                method: "DELETE",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ list_id: list })
            })

            if(response.status == 200){
                window.location.reload()
            }else{
              Swal.fire({
                title: "No lists found!",
                text: "Search for a movie and create your list!",
                icon: "error",
                background: "#1c1917",
                color: "#ffffff",
                iconColor: "#ef4444",
                confirmButtonText: "Ok",
                confirmButtonColor: "#2563eb",
              });
            }
        })

        async function load_user_watched_count(){
          const span_count = document.getElementById("user-watched-count");
          const span_diff_count = document.getElementById("user-diff-count");

          const response = await fetch("/api/user-watched-count");
          if(response.status == 404){
            span_count.innerHTML = "No data";
            span_diff_count.innerHTML = "No data";
            return;
          }

          const data = await response.json();
          span_count.innerHTML = data.watchedCount;
          span_diff_count.innerHTML = data.watchedDiffCount;
        }

        async function load_user_list(){
            const list_selector = document.getElementById("user-lists");

            const sort_button = document.getElementById("sort")
            const edit_button = document.getElementById("edit")
            const delete_button = document.getElementById("delete")

            const response = await fetch("/api/user-list");
            if (response.status == 404) {
                sort_button.classList.add("cursor-not-allowed")
                sort_button.disabled = true;
                edit_button.classList.add("cursor-not-allowed")
                edit_button.disabled = true;
                delete_button.classList.add("cursor-not-allowed")
                delete_button.disabled = true;
                list_selector.innerHTML = "<option>No lists found</option>";
                return;
          }else{
                sort_button.classList.remove("cursor-not-allowed")
                sort_button.disabled = false;
                edit_button.classList.remove("cursor-not-allowed")
                edit_button.disabled = false;
                delete_button.classList.remove("cursor-not-allowed")
                delete_button.disabled = false;
          }

            const lists = await response.json();
            list_selector.innerHTML = "";

            lists.forEach(list => {
                const option = document.createElement("option");
                option.value = list.id;
                option.textContent = list.nome_lista;
                list_selector.appendChild(option);
            });
        }

        window.addEventListener("keydown", function (e) {
          if(e.code === "Enter"){
              search_movie_db();
            }
        });

        async function search_movie_db(){
            var input = document.getElementById("movie-input").value;
            input = input.toLowerCase();

            if(input.trim() == ""){
              return;
            }

            const tabela = document.getElementById("movies-table");
            tabela.innerHTML = "<h2 class='text-white text-center animate-pulse'>Loading...</h2>";

            var response = await fetch(`/search/${input}`);
            const data = await response.json();

            tabela.innerHTML = "";
            data.map((res) => {
                const url = new URL(res.link);
                const pathname = url.pathname.split('/');
                const movieId = pathname[2];
                tabela.innerHTML += `<span class="text-white"><a href="/detail/${movieId}" class="text-blue-300 hover:text-blue-500">${res.title}</a> - ${res.year}</span><hr>`;
            });
        }
        window.addEventListener('pageshow', function (event) {
          load_user_list();
          load_user_watched_count();
        });
    </script>
</body>
</html>
